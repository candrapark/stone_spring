# author Candra
# since 2010. 03. 24
# version 1.0
# 기본적인 모든 로그들이 DEBUG 레벨로, 그리고 stdout이라는 이름으로 출력되도록 설정
log4j.rootLogger=WARN, stdout
# Log Level and Appender
#log4j.logger.com.some=DEBUG, console
#log4j.logger.com.some.Any=INFO, logfile
#log4j.additivity.com.some=false

# Console Log 설정
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=[%p] %d (%c:%L): %m%n

# Daily File Log 설정
log4j.appender.stdout=org.apache.log4j.DailyRollingFileAppender
# - 하루동안 쌓았던 로그를 날짜별로 구분해 파일로 저장한다.
log4j.appender.stdout.Append=true
# - 이 값이 true이면 웹 컨테이너를 재시작해도 로그 파일을 리셋하지 않겠다는 의미
log4j.appender.stdout.Threshold=DEBUG
# - 높은 메시지만 로깅 함.
log4j.appender.stdout.File=D:\NetworkProject\workspace\log4j\log4j.log
# - 저장될 로그파일의 디렉토리 경로 (상대경로와 절대경로로 입력할 수 있음, 상대경로 입력시 루트 경로)
log4j.appender.stdout.DatePattern='.'yyyy-MM-dd
# - 일 ('.'yyyy-MM-dd)
# - 월 ('.'yyyy-MM)
# - 주 ('.'yyyy-MM-ww)
# - 12시간 ('.'yyyy-MM-dd-a)
# - 1시간 ('.'yyyy-MM-dd-HH)
log4j.appender.stdout.MaxFileSize==300KB
# - 로그 파일에 일저 용량만큼 로그가 채워지면 새로운 파일에 쓰는 방식
#log4j.appender.stdout.MaxBackupIndex=1
# - 파일의 갯수도 지정하여 일정 파일 갯수만큼 생성되었다면 다시 처음의 로그파일 재기록

# JDBC Log 설정
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG
log4j.logger.java.sql.ResultSet=DEBUG

# Hibernate Log 설정
#log4j.category.org.hibernate.transaction=DEBUG, stdout
#log4j.category.org.hibernate.SQL=DEBUG, stdout
#log4j.category.org.hibernate.jdbc=DEBUG, stdout
#log4j.category.org.hibernate.type=DEBUG, stdout

# iBatis Log 설정
#log4j.logger.com.ibatis=DEBUG
#log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG
#log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG
#log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG

# Struts2 Log 설정
log4j.logger.com.opensymphony=DEBUG
log4j.logger.org.apache.struts2=DEBUG
log4j.logger.com.opensymphony.xwork2.util.profiling.UtilTimerStack=DEBUG

# Spring Log 설정
log4j.logger.org.springframework=DEBUG

log4j.logger.noModule=FATAL

# ----------------------------------------------------------------------------
# Log4j의 구조는 크게 3가지로 구성요소를 가진다.
# 1. logger
#  - 로그파일을 작성하고, Appender에 메시지를 전달하는 기능을 한다.
# 2. Appender
#  - 로그를 출력하는 위치를 지정한다.
#   2-1 ConsoleAppender  (콘솔에 로그 메시지를 출력)
#    FileAppender  (파일에 로그 메시지를 출력)
#    RollingFileAppender (로그의 크기가 지정된 용량 이상이 되면 다른이름의 파일로 출력)
#    DailyRollingFileAppender (하루를 단위로 로그 메시지를 파일 출력)
#    SMTPAppender  (로그 메시지를 이메일로 보냄)
#    NTEventLogAppender (윈도의 이벤트 로그 시스템에 기록)
# 3. Layout
#  - Appender로 출력되는 메시지를 보여주는 틀을 정의
#   3-1 %d (로그의 기록 시간 출력)
#    %p (로그의 우선순위 출력)
#    %F (로깅이 발생한 프로그램 파일명 출력)
#    %M (로깅이 발생한 메소드의 이름 출력)
#    %L (로깅이 발생한 호출자의 라인수 출력)
#    %m (로그 메시지 출력)
#    % (n개행 문자를 출력)
#
# Log4j Level
#   1. FATAL 심각한 오류가 일어났을 때 사용
#   2. ERROR 일반적인 오류가 일어났을 때 사용
#   3. WARN  오류는 아니지만 주의가 필요할 때 사용
#   4. INFO  일반 정보를 나타낼 때 사용
#   5. DEBUG 좀더 상세한 정보를 나타낼 때 사용
# 6. OFF  로그 사용 안함
# ----------------------------------------------------------------------------
